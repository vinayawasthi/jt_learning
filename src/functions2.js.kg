// function.call method
// With the call() method, you can write a method that can be used on different objects.
// With the apply() method, you can write a method that can be used on different objects.
// The call() method takes arguments separately.
// The apply() method takes arguments as an array.
// apply function note:
// In JavaScript strict mode, if the first argument of the apply() method is not an object, 
// it becomes the owner (object) of the invoked function. In "non-strict" mode, 

import { log } from "console";

// it becomes the global object.
const person = {
    fullName: function () {
        return this.firstName + " " + this.lastName;
    },
    details: function (city: string, country: string) {
        return this.firstName + " " + this.lastName + ", " + city + ", " + country;
    }
}
const person1 = {
    firstName: "John",
    lastName: "Doe"
}
const person2 = {
    firstName: "Mary",
    lastName: "Doe"
}

// This will return "John Doe":
let p1x = person.fullName.call(person1);
let p1y = person.details.call(person1, "jaipur", "india");
log([p1x, p1y]);

p1x = person.fullName.apply(person1);
p1y = person.details.apply(person1, ["jaipur", "india"]);
log([p1x, p1y]);

// bind or function borrowing
// With the bind() method, an object can borrow a method from another object.
const personx = {
    firstName: "John",
    lastName: "Doe",
    display: function () {
        let x = this.firstName + " " + this.lastName;
        return x;
    }
}

personx.display()
console.log(personx.display.bind(personx));
console.log(personx.display())
